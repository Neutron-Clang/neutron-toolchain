#!/usr/bin/env bash
# Written by: dakkshesh07
# AntMan v1.0 (A Nonsensical Toolchain Manager)
# Copyright (c) 2022 Dakkshesh <dakkshesh5@gmail.com>
#
#			GNU GENERAL PUBLIC LICENSE
#			 Version 3, 29 June 2007
#
# Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
# Everyone is permitted to copy and distribute verbatim copies
# of this license document, but changing it is not allowed.
set -e

ANTMAN_VER="v1.0"

# A function to showcase the options provided for args-based usage.
helpmenu() {
	echo -e "\e[1m
*** A Nonsensical Toolchain Manager $ANTMAN_VER, by Dakkshesh07 ***
Usage :
      $0 [args]
Arguments :
 -S=<tag>     : Download and sync latest toolchain build from Neutron-Clang repos.
                By default AntMan will sync latest build,
                To sync to a specific build pass appropriate build tag in <tag>.
                Example: $0 -S
                Example: $0 -S=latest
                Exmaple: $0 -S=42069420

 -U           : Run a dry check to see if any toolchain update is available on Neutron-Clang repos.

 -Uy=<tag>    : Download updated toolchain build from Neutron-Clang repos and upgrade.
                By default AntMan will upgrade to latest build,
                To upgrade to a specific build pass appropriate build tag in <tag>.
                Example: $0 -Uy
                Example: $0 -Uy=latest
                Exmaple: $0 -Uy=42069420

 -D           : Delete all clang related files.
                AntMan script itself wont be deleted when this command is ran.

 -I           : Show local build information.

 -H/--help    : Show this help menu.

 --version    : Show AntMan version."
}

# A Function to check if package exists
pkg_check() {
	if ! command -v "$1" --help &>/dev/null; then
		echo "$1: No"
		echo "Error: $1 not found!"
		exit 1
	else
		echo "$1: yes"
	fi
}

# A Function to fetch/download Neutron clang builds from remote repos
sync_tar() {
	echo -e "\e[1m
Checking for system requirements..."
	pkg_check "zstd"
	pkg_check "tar"
	pkg_check "curl"
	pkg_check "wget"
	pkg_check "sha256sum"

	echo -e "\e[1m
Fetching build info..."
	echo "Requested Tag: $1"

	if [[ $1 == "latest" ]]; then
		r_tag=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
		echo "Latest Tag: $r_tag"
	else
		if ! curl --output /dev/null --silent --head --fail "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$1-info.txt"; then
			echo "Error: $1 is not a valid tag"
			exit 1
		fi
		r_tag=$1
	fi

	clang_ver=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 clang-ver | tail -n1)
	b_date=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 date | tail -n1)
	llvm_c=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 llvm-commit | tail -n1)
	binutils_ver=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 binutils-ver | tail -n1)
	binutils_c=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 binutils-commit | tail -n1)
	h_glibc=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 host-glibc | tail -n1)
	t_size=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 size | tail -n1)
	t_shasum=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt" | grep -A1 shasum | tail -n1)

	echo "Build Date: $b_date"
	echo "Clang Version: $clang_ver"
	echo "LLVM commit at: $llvm_c"
	echo "Binutils Version: $binutils_ver"
	echo "Binutils commit at: $binutils_c"
	echo "Glibc requirement: $h_glibc"
	echo "Build size: $t_size"
	echo "Build sha256sum: $t_shasum"

	echo -e "\e[1m
Fetching build tar..."
	wget --quiet --show-progress "https://github.com/Neutron-Toolchains/clang-build-catalogue/releases/download/$r_tag/neutron-clang-$r_tag.tar.zst"

	echo -e "\e[1m
Checking file integrity of the tar..."
	if ! echo "$t_shasum neutron-clang-$r_tag.tar.zst" | sha256sum -c -; then
		echo "Error: File integrity check failed" >&2
		exit 1
	fi

	echo -e "\e[1m
Extracting tar..."
	tar -I zstd -xf "neutron-clang-$r_tag.tar.zst"

	wget --quiet -O build.info "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$r_tag-info.txt"
	echo -e "\n[tag]\n$r_tag" >>"build.info"

	echo -e "\e[1m
Cleaning up..."
	rm -rf "neutron-clang-$r_tag.tar.zst"
}

update_check() {
	echo -e "\e[1m
Checking for system requirements..."
	pkg_check "curl"
	echo -e "\e[1m
Checking for updates..."
	l_tag=$(grep -A1 tag build.info | tail -n1)
	r_tag=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
	if [[ $l_tag == "$r_tag" ]]; then
		echo "Already up-to-date!"
		exit 0
	else
		echo "New update found!"
		echo "Update tag: $r_tag"
		echo -e "\nRun $0 -Uy to upgrade"
	fi
}

delete() {
	c_dir=$(pwd)
	echo -e "\e[1m
Cleaning toolchain files..."
	echo "Everything in $c_dir/ except this script itself would be deleted!"
	while true; do
		read -rp "Proceed? [Y/N] " yn
		case $yn in
		[Yy]*)
			echo "Cleaning..."
			find . ! -name "$(basename "$0")" -delete
			break
			;;
		[Nn]*) exit 0 ;;
		*) echo "Please answer yes or no." ;;
		esac
	done
}

upgrade_build() {
	echo -e "\e[1m
Checking for system requirements..."
	pkg_check "curl"
	echo -e "\e[1m
Checking for updates..."
	l_tag=$(grep -A1 tag build.info | tail -n1)
	if [[ $1 == "latest" ]]; then
		r_tag=$(curl --silent "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/latest.txt" | grep -A1 tag | tail -n1)
	else
		if ! curl --output /dev/null --silent --head --fail "https://raw.githubusercontent.com/Neutron-Toolchains/clang-build-catalogue/main/$1-info.txt"; then
			echo "Error: $1 is not a valid tag"
			exit 1
		fi
		r_tag=$1
	fi
	if [[ $l_tag == "$r_tag" ]]; then
		echo "Nothing to do, Already up-to-date"
		exit 0
	elif [[ $r_tag -lt $l_tag ]]; then
		echo "Error: The requested tag ($r_tag) is older than the installed toolchain build ($l_tag)"
		exit 1
	else
		echo "New update found!"
		echo "New tag: $r_tag"
		echo "Removing old toolchain files using $0 -D"
		delete
		echo "Downloading new toolchain build using $0 -S=$r_tag"
		sync_tar "$r_tag"
		echo -e "\nToolchain upgraded to $r_tag build!"
	fi
}

show_info() {
	echo -e "\e[1m
Getting toolchain information from build.info...\n"
	echo "Build date: $(grep -A1 date build.info | tail -n1)"
	echo "Build tag: $(grep -A1 tag build.info | tail -n1)"
	echo "Clang version: $(grep -A1 clang-ver build.info | tail -n1)"
	echo "LLVM commit at: $(grep -A1 llvm-commit build.info | tail -n1)"
	echo "Binutils version: $(grep -A1 binutils-ver build.info | tail -n1)"
	echo "Binutils commit at: $(grep -A1 binutils-commit build.info | tail -n1)"
	echo "Glibc requirement: $(grep -A1 host-glibc build.info | tail -n1)"
}

for arg in "$@"; do
	case "${arg}" in
	"-S"*)
		tag="${arg#*-S}"
		tag=${tag:1}
		if [[ -z $tag ]]; then
			tag="latest"
		fi
		sync_tar $tag
		echo -e "\nToolchain build $r_tag synced!"
		exit 0
		;;
	"-U")
		update_check
		exit 0
		;;
	"-Uy"*)
		u_tag="${arg#*-Uy}"
		u_tag=${u_tag:1}
		if [[ -z $u_tag ]]; then
			u_tag="latest"
		fi
		upgrade_build $u_tag
		exit 0
		;;
	"-D")
		delete
		exit 0
		;;
	"-I")
		show_info
		exit 0
		;;
	"--version")
		echo "A Nonsensical Toolchain Manager $ANTMAN_VER, by Dakkshesh07"
		exit 0
		;;
	"--help")
		helpmenu
		exit 0
		;;
	"-H")
		helpmenu
		exit 0
		;;
	*)
		helpmenu
		exit 1
		;;
	esac
done

helpmenu
exit 1
